R""(
#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0)
uniform image2D imgOutput;

layout(location = 0)
uniform float t;

const int MandelbrotIterations = 1000;
const int MandelbrotScale = 2;

vec2 MultiplyComplex(vec2 a, vec2 b)
{
    vec2 c = vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
    return c;
}

vec2 ComplexPower(vec2 a, float N)
{
    float r = length(a);
    float theta = atan(a.y / a.x);
    
    r = pow(r, N);
    theta = theta * N;
    
    vec2 b = vec2(r * cos(theta), r * sin(theta));
    return b;
}

vec3 Mandelbrotset(vec2 InitialPosition)
{
    InitialPosition = InitialPosition;
    vec2 position = InitialPosition;
    
    int i = 0;
    for (; i < MandelbrotIterations; i++)
    {
        position = ComplexPower(position, t)+ InitialPosition;
        if (length(position) >= 2)
        {
            break;
        }

    }
    return (i == (MandelbrotIterations)) ? vec3(0.0, 0.0, 0.0) : vec3(1.0, 0.0, 0.0) * log(float(i)) / log(float(MandelbrotIterations));
    //return vec3(1.0, 0.0, 0.0) * float(i) / float(MandelbrotIterations);

}

void main()
{
    vec4 value = vec4(0.0, 0.0, 1.0, 1.0);
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    
    vec2 a = vec2(gl_GlobalInvocationID.xy) - vec2(gl_WorkGroupSize.xy * gl_NumWorkGroups.xy) * 0.5;
    vec2 b = a / vec2(gl_WorkGroupSize.yy * gl_NumWorkGroups.yy) * 2.0;
    
    vec2 normalisedCoords = b;
    
    value.xyz = Mandelbrotset(normalisedCoords);
    
    imageStore(imgOutput, texelCoord, value);
}
)""